using System.Collections.Generic;
using System.Net.Http;

namespace Mockolate.SourceGenerators.Tests;

public class Test
{
	[Fact]
	public async Task AllGeneratedSourcesShouldContainAutoGeneratedTag()
	{
		GeneratorResult result = Generator
			.Run("""
			     using Mockolate;

			     namespace MyCode
			     {
			         public class Program
			         {
			             public static void Main(string[] args)
			             {
			     			var x = Mock.For<string>();
			     			var y = Mock.For<IMyInterface>();
			     			var z = Mock.For<MyBaseClass>();
			             }
			         }
			     
			         public interface IMyInterface
			         {
			             void MyMethod(int value);
			         }
			     
			         public class MyBaseClass
			         {
			             protected virtual void MyMethod(int value)
			             {
			                 // Do nothing
			             }
			         }
			     }
			     """);

		await That(result.Diagnostics).IsEmpty();

		await That(result.Sources.Values).All()
			.Satisfy(x => x.Contains("<auto-generated>") && x.Contains("</auto-generated>"));
	}
	[Fact]
	public async Task MockOfIList_ShouldContainGetEnumeratorFromIEnumerableAndIEnumerableOfT()
	{
		GeneratorResult result = Generator
			.Run("""
			     using System.Collections.Generic;

			     namespace MyCode
			     {
			         public class Program
			         {
			             public static void Main(string[] args)
			             {
			     			var x = Mockolate.Mock.For<IList<int>>();
			             }
			         }
			     }
			     
			     """, typeof(IList<>));

		await That(result.Diagnostics).IsEmpty();

		await That(result.Sources).ContainsKey("ForIListint.g.cs").WhoseValue
			.Contains("IEnumerator IEnumerable.GetEnumerator()").And
			.Contains("public IEnumerator<int> GetEnumerator()");
	}

	[Fact]
	public async Task MockOfHttpMessageHandler_ShouldContainGetEnumeratorFromIEnumerableAndIEnumerableOfT()
	{
		GeneratorResult result = Generator
			.Run("""
			     using System.Net.Http;
			     using Mockolate;

			     namespace MyCode
			     {
			         public class Program
			         {
			             public static void Main(string[] args)
			             {
			     			var mock = Mock.For<HttpMessageHandler>();
			     			var httpClient = new HttpClient(mock.Object);
			             }
			         }
			     }
			     """, typeof(HttpMessageHandler));

		await That(result.Diagnostics).IsEmpty();

		await That(result.Sources).ContainsKey("ForHttpMessageHandler.g.cs").WhoseValue
			.Contains("protected override void Dispose(bool disposing)").And
			.DoesNotContain("void Dispose()");
	}
}
