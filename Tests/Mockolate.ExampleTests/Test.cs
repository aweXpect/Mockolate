//----------------------
// <auto-generated>
//     This code was generated by the 'Mockolate' source generator.
//
//     Changes to this file may cause incorrect behavior and
//     will be lost if the code is regenerated!
// </auto-generated>
//----------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Mockolate.Events;
using Mockolate.Exceptions;
using Mockolate.Protected;
using Mockolate.Setup;
using Mockolate.Verify;

namespace Mockolate.Generated;

#nullable enable
internal static class ForIListint2
{
	/// <summary>
	///     The mock class for <see cref="IList{int}" />.
	/// </summary>
	public class Mock : Mock<IList<int>>
	{
		/// <inheritdoc cref="Mock" />
		public Mock(BaseClass.ConstructorParameters? constructorParameters, MockBehavior mockBehavior) : base(mockBehavior)
		{
			Subject = new MockSubject(this);
		}

		/// <inheritdoc cref="Mock{IList{int}}.Subject" />
		public override IList<int> Subject { get; }
	}

	/// <summary>
	///     The actual mock subject implementing <see cref="IList{int}" />.
	/// </summary>
	public partial class MockSubject : IList<int>
	{
		private IMock _mock;

		/// <inheritdoc cref="MockSubject" />
		public MockSubject(IMock mock)
		{
			_mock = mock;
		}

		#region IList<int>
		/// <inheritdoc cref="IList{int}.this[int]" />
		public int this[int index]
		{
			get
			{
				return _mock.GetIndexer<int>(index);
			}
			set
			{
				_mock.SetIndexer<int>(value, index);
			}
		}

		/// <inheritdoc cref="IList{int}.Count" />
		public int Count
		{
			get
			{
				return _mock.Get<int>("System.Collections.Generic.IList<int>.Count");
			}
		}

		/// <inheritdoc cref="IList{int}.IsReadOnly" />
		public bool IsReadOnly
		{
			get
			{
				return _mock.Get<bool>("System.Collections.Generic.IList<int>.IsReadOnly");
			}
		}

		/// <inheritdoc cref="IList{int}.IndexOf(int)" />
		public int IndexOf(int item)
		{
			var result = _mock.Execute<int>("System.Collections.Generic.IList<int>.IndexOf", item);
			return result.Result;
		}

		/// <inheritdoc cref="IList{int}.Insert(int, int)" />
		public void Insert(int index, int item)
		{
			var result = _mock.Execute("System.Collections.Generic.IList<int>.Insert", index, item);
		}

		/// <inheritdoc cref="IList{int}.RemoveAt(int)" />
		public void RemoveAt(int index)
		{
			var result = _mock.Execute("System.Collections.Generic.IList<int>.RemoveAt", index);
		}

		/// <inheritdoc cref="IList{int}.Add(int)" />
		public void Add(int item)
		{
			var result = _mock.Execute("System.Collections.Generic.IList<int>.Add", item);
		}

		/// <inheritdoc cref="IList{int}.Clear()" />
		public void Clear()
		{
			var result = _mock.Execute("System.Collections.Generic.IList<int>.Clear");
		}

		/// <inheritdoc cref="IList{int}.Contains(int)" />
		public bool Contains(int item)
		{
			var result = _mock.Execute<bool>("System.Collections.Generic.IList<int>.Contains", item);
			return result.Result;
		}

		/// <inheritdoc cref="IList{int}.CopyTo(int[], int)" />
		public void CopyTo(int[] array, int arrayIndex)
		{
			var result = _mock.Execute("System.Collections.Generic.IList<int>.CopyTo", array, arrayIndex);
		}

		/// <inheritdoc cref="IList{int}.Remove(int)" />
		public bool Remove(int item)
		{
			var result = _mock.Execute<bool>("System.Collections.Generic.IList<int>.Remove", item);
			return result.Result;
		}

		/// <inheritdoc cref="IList{int}.GetEnumerator()" />
		public System.Collections.Generic.IEnumerator<int> GetEnumerator()
		{
			var result = _mock.Execute<System.Collections.Generic.IEnumerator<int>>("System.Collections.Generic.IList<int>.GetEnumerator");
			return result.Result;
		}

		/// <inheritdoc cref="IList{int}.GetEnumerator()" />
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			var result = _mock.Execute<System.Collections.IEnumerator>("System.Collections.Generic.IList<int>.GetEnumerator");
			return result.Result;
		}
		#endregion IList<int>
	}
}
#nullable disable
