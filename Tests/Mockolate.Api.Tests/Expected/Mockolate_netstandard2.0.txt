[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/aweXpect/Mockolate.git")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName=".NET Standard 2.0")]
namespace Mockolate
{
    public static class BaseClass
    {
        public static Mockolate.BaseClass.ConstructorParameters WithConstructorParameters(params object?[]? parameters) { }
        public class ConstructorParameters : System.IEquatable<Mockolate.BaseClass.ConstructorParameters>
        {
            public ConstructorParameters(object?[] Parameters) { }
            public object?[] Parameters { get; init; }
        }
    }
    public interface IMock
    {
        Mockolate.MockBehavior Behavior { get; }
        Mockolate.Interactions.MockInteractions Interactions { get; }
        Mockolate.Events.IMockRaises Raise { get; }
        Mockolate.Setup.IMockSetup Setup { get; }
        Mockolate.Setup.MethodSetupResult Execute(string methodName, params object?[]? parameters);
        Mockolate.Setup.MethodSetupResult<TResult> Execute<TResult>(string methodName, params object?[]? parameters);
        TResult Get<TResult>(string propertyName);
        TResult GetIndexer<TResult>(params object?[] parameters);
        void Set(string propertyName, object? value);
        void SetIndexer<TResult>(TResult value, params object?[] parameters);
    }
    [System.Diagnostics.DebuggerDisplay("Setup: {Setup}, {_interactions.Count} interactions")]
    public abstract class MockBase<T> : Mockolate.IMock
    {
        protected MockBase(Mockolate.MockBehavior behavior) { }
        public Mockolate.Events.MockRaises<T> Raise { get; }
        public Mockolate.Setup.MockSetup<T> Setup { get; }
        public abstract T Subject { get; }
        protected bool TryCast<TValue>(object? value, out TValue result) { }
        public static T op_Implicit(Mockolate.MockBase<T> mock) { }
    }
    public class MockBehavior : System.IEquatable<Mockolate.MockBehavior>
    {
        public MockBehavior() { }
        public Mockolate.MockBehavior.IDefaultValueGenerator DefaultValueGenerator { get; init; }
        public bool ThrowWhenNotSetup { get; init; }
        public static Mockolate.MockBehavior Default { get; }
        public interface IDefaultValueGenerator
        {
            T Generate<T>();
        }
    }
    public abstract class Mock<T> : Mockolate.MockBase<T>
    {
        protected Mock(Mockolate.MockBehavior behavior) { }
        public Mockolate.Verify.MockVerify<T, Mockolate.Mock<T>> Verify { get; }
    }
    public abstract class Mock<T1, T2> : Mockolate.MockBase<T1>
    {
        protected Mock(Mockolate.MockBehavior behavior) { }
        public Mockolate.Verify.MockVerify<T1, Mockolate.Mock<T1, T2>> Verify { get; }
    }
    public abstract class Mock<T1, T2, T3> : Mockolate.MockBase<T1>
    {
        protected Mock(Mockolate.MockBehavior behavior) { }
        public Mockolate.Verify.MockVerify<T1, Mockolate.Mock<T1, T2, T3>> Verify { get; }
    }
    public abstract class Mock<T1, T2, T3, T4> : Mockolate.MockBase<T1>
    {
        protected Mock(Mockolate.MockBehavior behavior) { }
        public Mockolate.Verify.MockVerify<T1, Mockolate.Mock<T1, T2, T3, T4>> Verify { get; }
    }
    public abstract class Mock<T1, T2, T3, T4, T5> : Mockolate.MockBase<T1>
    {
        protected Mock(Mockolate.MockBehavior behavior) { }
        public Mockolate.Verify.MockVerify<T1, Mockolate.Mock<T1, T2, T3, T4, T5>> Verify { get; }
    }
    public abstract class Mock<T1, T2, T3, T4, T5, T6> : Mockolate.MockBase<T1>
    {
        protected Mock(Mockolate.MockBehavior behavior) { }
        public Mockolate.Verify.MockVerify<T1, Mockolate.Mock<T1, T2, T3, T4, T5, T6>> Verify { get; }
    }
    public abstract class Mock<T1, T2, T3, T4, T5, T6, T7> : Mockolate.MockBase<T1>
    {
        protected Mock(Mockolate.MockBehavior behavior) { }
        public Mockolate.Verify.MockVerify<T1, Mockolate.Mock<T1, T2, T3, T4, T5, T6, T7>> Verify { get; }
    }
    public abstract class Mock<T1, T2, T3, T4, T5, T6, T7, T8> : Mockolate.MockBase<T1>
    {
        protected Mock(Mockolate.MockBehavior behavior) { }
        public Mockolate.Verify.MockVerify<T1, Mockolate.Mock<T1, T2, T3, T4, T5, T6, T7, T8>> Verify { get; }
    }
    public abstract class Mock<T1, T2, T3, T4, T5, T6, T7, T8, T9> : Mockolate.MockBase<T1>
    {
        protected Mock(Mockolate.MockBehavior behavior) { }
        public Mockolate.Verify.MockVerify<T1, Mockolate.Mock<T1, T2, T3, T4, T5, T6, T7, T8, T9>> Verify { get; }
    }
    public static class ReturnsAsyncExtensions
    {
        public static Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>> ReturnsAsync<TReturn>(this Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>> setup, System.Func<TReturn> callback) { }
        public static Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>> ReturnsAsync<TReturn>(this Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>> setup, TReturn returnValue) { }
        public static Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1> ReturnsAsync<TReturn, T1>(this Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1> setup, System.Func<TReturn> callback) { }
        public static Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1> ReturnsAsync<TReturn, T1>(this Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1> setup, System.Func<T1, TReturn> callback) { }
        public static Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1> ReturnsAsync<TReturn, T1>(this Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1> setup, TReturn returnValue) { }
        public static Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2> ReturnsAsync<TReturn, T1, T2>(this Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2> setup, System.Func<TReturn> callback) { }
        public static Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2> ReturnsAsync<TReturn, T1, T2>(this Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2> setup, System.Func<T1, T2, TReturn> callback) { }
        public static Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2> ReturnsAsync<TReturn, T1, T2>(this Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2> setup, TReturn returnValue) { }
        public static Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3> ReturnsAsync<TReturn, T1, T2, T3>(this Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3> setup, System.Func<TReturn> callback) { }
        public static Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3> ReturnsAsync<TReturn, T1, T2, T3>(this Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3> setup, System.Func<T1, T2, T3, TReturn> callback) { }
        public static Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3> ReturnsAsync<TReturn, T1, T2, T3>(this Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3> setup, TReturn returnValue) { }
        public static Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3, T4> ReturnsAsync<TReturn, T1, T2, T3, T4>(this Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3, T4> setup, System.Func<TReturn> callback) { }
        public static Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3, T4> ReturnsAsync<TReturn, T1, T2, T3, T4>(this Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3, T4> setup, System.Func<T1, T2, T3, T4, TReturn> callback) { }
        public static Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3, T4> ReturnsAsync<TReturn, T1, T2, T3, T4>(this Mockolate.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3, T4> setup, TReturn returnValue) { }
    }
    public class With
    {
        public static Mockolate.With.Parameter<T> Any<T>() { }
        public static Mockolate.With.Parameter<T> Matching<T>(System.Func<T, bool> predicate, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue = "") { }
        public static Mockolate.With.Parameter<T> Null<T>() { }
        public static Mockolate.With.InvokedOutParameter<T> Out<T>() { }
        public static Mockolate.With.OutParameter<T> Out<T>(System.Func<T> setter, [System.Runtime.CompilerServices.CallerArgumentExpression("setter")] string doNotPopulateThisValue = "") { }
        public static Mockolate.With.InvokedRefParameter<T> Ref<T>() { }
        public static Mockolate.With.RefParameter<T> Ref<T>(System.Func<T, T> setter, [System.Runtime.CompilerServices.CallerArgumentExpression("setter")] string doNotPopulateThisValue = "") { }
        public static Mockolate.With.RefParameter<T> Ref<T>(System.Func<T, bool> predicate, System.Func<T, T> setter, [System.Runtime.CompilerServices.CallerArgumentExpression("predicate")] string doNotPopulateThisValue1 = "", [System.Runtime.CompilerServices.CallerArgumentExpression("setter")] string doNotPopulateThisValue2 = "") { }
        public static Mockolate.With.Parameter<T> Value<T>(T value, [System.Runtime.CompilerServices.CallerArgumentExpression("value")] string doNotPopulateThisValue = "") { }
        public static Mockolate.With.Parameter<T> Value<T>(T value, System.Collections.Generic.IEqualityComparer<T> comparer, [System.Runtime.CompilerServices.CallerArgumentExpression("value")] string doNotPopulateThisValue1 = "", [System.Runtime.CompilerServices.CallerArgumentExpression("comparer")] string doNotPopulateThisValue2 = "") { }
        public class InvokedOutParameter<T> : Mockolate.With.Parameter
        {
            public InvokedOutParameter() { }
            public override bool Matches(object? value) { }
            public override string ToString() { }
        }
        public class InvokedRefParameter<T> : Mockolate.With.Parameter
        {
            public InvokedRefParameter() { }
            public override bool Matches(object? value) { }
            public override string ToString() { }
        }
        public class NamedParameter : System.IEquatable<Mockolate.With.NamedParameter>
        {
            public NamedParameter(string Name, Mockolate.With.Parameter Parameter) { }
            public string Name { get; init; }
            public Mockolate.With.Parameter Parameter { get; init; }
            public override string ToString() { }
        }
        public class OutParameter<T> : Mockolate.With.Parameter
        {
            public OutParameter(System.Func<T> setter, string setterExpression) { }
            public T GetValue() { }
            public override bool Matches(object? value) { }
            public override string ToString() { }
        }
        public abstract class Parameter
        {
            protected Parameter() { }
            public abstract bool Matches(object? value);
        }
        public abstract class Parameter<T> : Mockolate.With.Parameter
        {
            protected Parameter() { }
            protected abstract bool Matches(T value);
            public override bool Matches(object? value) { }
            public static Mockolate.With.Parameter<T> op_Implicit(T value) { }
        }
        public class RefParameter<T> : Mockolate.With.Parameter
        {
            public RefParameter(System.Func<T, bool> predicate, System.Func<T, T> setter, string? predicateExpression, string setterExpression) { }
            public T GetValue(T value) { }
            public override bool Matches(object? value) { }
            public override string ToString() { }
        }
    }
}
namespace Mockolate.Events
{
    public interface IMockRaises
    {
        void AddEvent(string name, object? target, System.Reflection.MethodInfo? method);
        void Raise(string eventName, params object?[] parameters);
        void RemoveEvent(string name, object? target, System.Reflection.MethodInfo? method);
    }
    public class MockRaises<T> : Mockolate.Events.IMockRaises
    {
        public MockRaises(Mockolate.Setup.IMockSetup setup, Mockolate.Interactions.MockInteractions interactions) { }
        public class Protected : Mockolate.Events.MockRaises<T>, Mockolate.Events.IMockRaises
        {
            public Protected(Mockolate.Events.IMockRaises inner, Mockolate.Setup.IMockSetup setup, Mockolate.Interactions.MockInteractions interactions) { }
        }
    }
}
namespace Mockolate.Exceptions
{
    public class MockException : System.Exception
    {
        public MockException(string message) { }
        public MockException(string message, System.Exception innerException) { }
    }
    public class MockNotSetupException : Mockolate.Exceptions.MockException
    {
        public MockNotSetupException(string message) { }
        public MockNotSetupException(string message, System.Exception innerException) { }
    }
}
namespace Mockolate.Interactions
{
    [System.Diagnostics.DebuggerDisplay("{ToString()}")]
    public class EventSubscription : Mockolate.Interactions.IInteraction
    {
        public EventSubscription(int index, string name, object? target, System.Reflection.MethodInfo method) { }
        public int Index { get; }
        public System.Reflection.MethodInfo Method { get; }
        public string Name { get; }
        public object? Target { get; }
        public override string ToString() { }
    }
    [System.Diagnostics.DebuggerDisplay("{ToString()}")]
    public class EventUnsubscription : Mockolate.Interactions.IInteraction
    {
        public EventUnsubscription(int index, string name, object? target, System.Reflection.MethodInfo method) { }
        public int Index { get; }
        public System.Reflection.MethodInfo Method { get; }
        public string Name { get; }
        public object? Target { get; }
        public override string ToString() { }
    }
    public interface IInteraction
    {
        int Index { get; }
    }
    public interface IMockInteractions
    {
        Mockolate.Interactions.IInteraction RegisterInteraction(Mockolate.Interactions.IInteraction interaction);
    }
    [System.Diagnostics.DebuggerDisplay("{ToString()}")]
    public class IndexerGetterAccess : Mockolate.Interactions.IInteraction
    {
        public IndexerGetterAccess(int index, object?[] parameters) { }
        public int Index { get; }
        public object?[] Parameters { get; }
        public override string ToString() { }
    }
    [System.Diagnostics.DebuggerDisplay("{ToString()}")]
    public class IndexerSetterAccess : Mockolate.Interactions.IInteraction
    {
        public IndexerSetterAccess(int index, object?[] parameters, object? value) { }
        public int Index { get; }
        public object?[] Parameters { get; }
        public object? Value { get; }
        public override string ToString() { }
    }
    [System.Diagnostics.DebuggerDisplay("{ToString()}")]
    public class MethodInvocation : Mockolate.Interactions.IInteraction
    {
        public MethodInvocation(int index, string name, object?[] parameters) { }
        public int Index { get; }
        public string Name { get; }
        public object?[] Parameters { get; }
        public override string ToString() { }
    }
    [System.Diagnostics.DebuggerDisplay("{_interactions}")]
    public class MockInteractions : Mockolate.Interactions.IMockInteractions
    {
        public MockInteractions() { }
        public int Count { get; }
        public System.Collections.Generic.IEnumerable<Mockolate.Interactions.IInteraction> Interactions { get; }
        public int GetNextIndex() { }
    }
    [System.Diagnostics.DebuggerDisplay("{ToString()}")]
    public class PropertyGetterAccess : Mockolate.Interactions.IInteraction
    {
        public PropertyGetterAccess(int index, string propertyName) { }
        public int Index { get; }
        public string Name { get; }
        public override string ToString() { }
    }
    [System.Diagnostics.DebuggerDisplay("{ToString()}")]
    public class PropertySetterAccess : Mockolate.Interactions.IInteraction
    {
        public PropertySetterAccess(int index, string propertyName, object? value) { }
        public int Index { get; }
        public string Name { get; }
        public object? Value { get; }
        public override string ToString() { }
    }
}
namespace Mockolate.Monitor
{
    public abstract class MockMonitor
    {
        protected MockMonitor(Mockolate.IMock mock) { }
        protected Mockolate.Interactions.MockInteractions Interactions { get; }
        public System.IDisposable Run() { }
    }
    public static class MockMonitorExtensions
    {
        public static Mockolate.Monitor.MockMonitor<T, Mockolate.Mock<T>> Monitor<T>(this Mockolate.Mock<T> mock) { }
    }
    public class MockMonitor<T, TMock> : Mockolate.Monitor.MockMonitor
        where TMock : Mockolate.IMock
    {
        public MockMonitor(TMock mock) { }
        public Mockolate.Verify.MockVerify<T, TMock> Verify { get; }
    }
}
namespace Mockolate.Protected
{
    public class ProtectedMock<T, TMock> : Mockolate.IMock
        where TMock : Mockolate.Mock<T>
    {
        public ProtectedMock(Mockolate.IMock inner, Mockolate.Interactions.MockInteractions interactions, TMock mock) { }
        public Mockolate.Events.MockRaises<T>.Protected Raise { get; }
        public Mockolate.Setup.MockSetup<T>.Protected Setup { get; }
        public Mockolate.Verify.MockVerify<T, Mockolate.Mock<T>>.Protected Verify { get; }
        public TResult GetIndexer<TResult>(params object?[] parameters) { }
        public void SetIndexer<TResult>(TResult value, params object?[] parameters) { }
    }
}
namespace Mockolate.Setup
{
    public interface IIndexerSetup
    {
        bool Matches(Mockolate.Interactions.IInteraction invocation);
        bool TryGetInitialValue<TValue>(Mockolate.MockBehavior behavior, object?[] parameters, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TValue value);
    }
    public interface IMethodSetup
    {
        bool Matches(Mockolate.Interactions.IInteraction invocation);
        T SetOutParameter<T>(string parameterName, Mockolate.MockBehavior behavior);
        T SetRefParameter<T>(string parameterName, T value, Mockolate.MockBehavior behavior);
    }
    public interface IMockSetup
    {
        Mockolate.IMock Mock { get; }
        void AddEvent(string eventName, object? target, System.Reflection.MethodInfo method);
        System.Collections.Generic.IEnumerable<System.ValueTuple<object?, System.Reflection.MethodInfo>> GetEventHandlers(string eventName);
        void RegisterIndexer(Mockolate.Setup.IndexerSetup indexerSetup);
        void RegisterMethod(Mockolate.Setup.MethodSetup methodSetup);
        void RegisterProperty(string propertyName, Mockolate.Setup.PropertySetup propertySetup);
        void RemoveEvent(string eventName, object? target, System.Reflection.MethodInfo method);
        void SetIndexerValue<TValue>(object?[] parameters, TValue value);
    }
    public abstract class IndexerSetup : Mockolate.Setup.IIndexerSetup
    {
        protected IndexerSetup() { }
        protected abstract void ExecuteGetterCallback(Mockolate.Interactions.IndexerGetterAccess indexerGetterAccess, Mockolate.MockBehavior behavior);
        protected abstract void ExecuteSetterCallback<T>(Mockolate.Interactions.IndexerSetterAccess indexerSetterAccess, T value, Mockolate.MockBehavior behavior);
        protected abstract bool IsMatch(object?[] parameters);
        protected abstract bool TryGetInitialValue<T>(Mockolate.MockBehavior behavior, object?[] parameters, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T value);
        protected static bool Matches(Mockolate.With.Parameter[] parameters, object?[] values) { }
        protected static bool TryCast<T>(object? value, out T result, Mockolate.MockBehavior behavior) { }
    }
    public class IndexerSetup<TValue, T1> : Mockolate.Setup.IndexerSetup
    {
        public IndexerSetup(Mockolate.With.Parameter<T1> match1) { }
        protected override void ExecuteGetterCallback(Mockolate.Interactions.IndexerGetterAccess indexerGetterAccess, Mockolate.MockBehavior behavior) { }
        protected override void ExecuteSetterCallback<T>(Mockolate.Interactions.IndexerSetterAccess indexerSetterAccess, T value, Mockolate.MockBehavior behavior) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1> InitializeWith(System.Func<T1, TValue> valueGenerator) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1> InitializeWith(TValue value) { }
        protected override bool IsMatch(object?[] parameters) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1> OnGet(System.Action callback) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1> OnGet(System.Action<T1> callback) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1> OnSet(System.Action callback) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1> OnSet(System.Action<TValue> callback) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1> OnSet(System.Action<TValue, T1> callback) { }
        protected override bool TryGetInitialValue<T>(Mockolate.MockBehavior behavior, object?[] parameters, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T value) { }
    }
    public class IndexerSetup<TValue, T1, T2> : Mockolate.Setup.IndexerSetup
    {
        public IndexerSetup(Mockolate.With.Parameter<T1> match1, Mockolate.With.Parameter<T2> match2) { }
        protected override void ExecuteGetterCallback(Mockolate.Interactions.IndexerGetterAccess indexerGetterAccess, Mockolate.MockBehavior behavior) { }
        protected override void ExecuteSetterCallback<T>(Mockolate.Interactions.IndexerSetterAccess indexerSetterAccess, T value, Mockolate.MockBehavior behavior) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1, T2> InitializeWith(System.Func<T1, T2, TValue> valueGenerator) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1, T2> InitializeWith(TValue value) { }
        protected override bool IsMatch(object?[] parameters) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1, T2> OnGet(System.Action callback) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1, T2> OnGet(System.Action<T1, T2> callback) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1, T2> OnSet(System.Action callback) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1, T2> OnSet(System.Action<TValue> callback) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1, T2> OnSet(System.Action<TValue, T1, T2> callback) { }
        protected override bool TryGetInitialValue<T>(Mockolate.MockBehavior behavior, object?[] parameters, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T value) { }
    }
    public class IndexerSetup<TValue, T1, T2, T3> : Mockolate.Setup.IndexerSetup
    {
        public IndexerSetup(Mockolate.With.Parameter<T1> match1, Mockolate.With.Parameter<T2> match2, Mockolate.With.Parameter<T3> match3) { }
        protected override void ExecuteGetterCallback(Mockolate.Interactions.IndexerGetterAccess indexerGetterAccess, Mockolate.MockBehavior behavior) { }
        protected override void ExecuteSetterCallback<T>(Mockolate.Interactions.IndexerSetterAccess indexerSetterAccess, T value, Mockolate.MockBehavior behavior) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1, T2, T3> InitializeWith(System.Func<T1, T2, T3, TValue> valueGenerator) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1, T2, T3> InitializeWith(TValue value) { }
        protected override bool IsMatch(object?[] parameters) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1, T2, T3> OnGet(System.Action callback) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1, T2, T3> OnGet(System.Action<T1, T2, T3> callback) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1, T2, T3> OnSet(System.Action callback) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1, T2, T3> OnSet(System.Action<TValue> callback) { }
        public Mockolate.Setup.IndexerSetup<TValue, T1, T2, T3> OnSet(System.Action<TValue, T1, T2, T3> callback) { }
        protected override bool TryGetInitialValue<T>(Mockolate.MockBehavior behavior, object?[] parameters, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T value) { }
    }
    public abstract class MethodSetup : Mockolate.Setup.IMethodSetup
    {
        protected MethodSetup() { }
        protected abstract void ExecuteCallback(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior);
        protected abstract TResult GetReturnValue<TResult>(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior);
        protected abstract bool IsMatch(Mockolate.Interactions.MethodInvocation invocation);
        protected abstract T SetOutParameter<T>(string parameterName, Mockolate.MockBehavior behavior);
        protected abstract T SetRefParameter<T>(string parameterName, T value, Mockolate.MockBehavior behavior);
        protected static string FormatType<TResult>() { }
        protected static bool HasOutParameter<T>(Mockolate.With.NamedParameter[] namedParameters, string parameterName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Mockolate.With.OutParameter<T>? parameter) { }
        protected static bool HasRefParameter<T>(Mockolate.With.NamedParameter[] namedParameters, string parameterName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Mockolate.With.RefParameter<T>? parameter) { }
        protected static bool Matches(Mockolate.With.NamedParameter[] namedParameters, object?[] values) { }
        protected static bool TryCast<T>(object? value, out T result, Mockolate.MockBehavior behavior) { }
    }
    public class MethodSetupResult
    {
        public MethodSetupResult(Mockolate.Setup.IMethodSetup? setup, Mockolate.MockBehavior behavior) { }
        public T SetOutParameter<T>(string parameterName) { }
        public T SetRefParameter<T>(string parameterName, T value) { }
    }
    public class MethodSetupResult<TResult> : Mockolate.Setup.MethodSetupResult
    {
        public MethodSetupResult(Mockolate.Setup.IMethodSetup? setup, Mockolate.MockBehavior behavior, TResult result) { }
        public TResult Result { get; }
    }
    [System.Diagnostics.DebuggerDisplay("{ToString()}")]
    public class MockSetup<T> : Mockolate.Setup.IMockSetup
    {
        public MockSetup(Mockolate.IMock mock) { }
        public override string ToString() { }
        public class Methods : Mockolate.Setup.IMockSetup
        {
            public Methods(Mockolate.Setup.MockSetup<T> setup) { }
            public Mockolate.IMock Mock { get; }
            public void SetIndexerValue<TValue>(object?[] parameters, TValue value) { }
        }
        public class Properties : Mockolate.Setup.IMockSetup
        {
            public Properties(Mockolate.Setup.MockSetup<T> setup) { }
            public Mockolate.IMock Mock { get; }
            public void SetIndexerValue<TValue>(object?[] parameters, TValue value) { }
        }
        public class Protected : Mockolate.Setup.MockSetup<T>, Mockolate.Setup.IMockSetup
        {
            public Protected(Mockolate.Setup.IMockSetup inner) { }
            public Mockolate.IMock Mock { get; }
            public void SetIndexerValue<TValue>(object?[] parameters, TValue value) { }
        }
        public class ProtectedMethods : Mockolate.Setup.IMockSetup
        {
            public ProtectedMethods(Mockolate.Setup.MockSetup<T> setup) { }
            public Mockolate.IMock Mock { get; }
            public void SetIndexerValue<TValue>(object?[] parameters, TValue value) { }
        }
        public class ProtectedProperties : Mockolate.Setup.IMockSetup
        {
            public ProtectedProperties(Mockolate.Setup.MockSetup<T> setup) { }
            public Mockolate.IMock Mock { get; }
            public void SetIndexerValue<TValue>(object?[] parameters, TValue value) { }
        }
        public class Proxy : Mockolate.Setup.MockSetup<T>, Mockolate.Setup.IMockSetup
        {
            public Proxy(Mockolate.Setup.IMockSetup inner) { }
            public Mockolate.IMock Mock { get; }
            public void SetIndexerValue<TValue>(object?[] parameters, TValue value) { }
        }
    }
    public abstract class PropertySetup
    {
        protected PropertySetup() { }
        protected abstract TResult InvokeGetter<TResult>();
        protected abstract void InvokeSetter(object? value);
    }
    public class PropertySetup<T> : Mockolate.Setup.PropertySetup
    {
        public PropertySetup() { }
        public Mockolate.Setup.PropertySetup<T> InitializeWith(T value) { }
        protected override TResult InvokeGetter<TResult>() { }
        protected override void InvokeSetter(object? value) { }
        public Mockolate.Setup.PropertySetup<T> OnGet(System.Action callback) { }
        public Mockolate.Setup.PropertySetup<T> OnSet(System.Action<T> callback) { }
        public override string ToString() { }
    }
    public class ReturnMethodSetup<TReturn> : Mockolate.Setup.MethodSetup
    {
        public ReturnMethodSetup(string name) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn> Callback(System.Action callback) { }
        protected override void ExecuteCallback(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override bool IsMatch(Mockolate.Interactions.MethodInvocation invocation) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn> Returns(System.Func<TReturn> callback) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn> Returns(TReturn returnValue) { }
        protected override T SetOutParameter<T>(string parameterName, Mockolate.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockolate.MockBehavior behavior) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn> Throws(System.Exception exception) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn> Throws(System.Func<System.Exception> callback) { }
        public override string ToString() { }
    }
    public class ReturnMethodSetup<TReturn, T1> : Mockolate.Setup.MethodSetup
    {
        public ReturnMethodSetup(string name, Mockolate.With.NamedParameter match1) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1> Callback(System.Action callback) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1> Callback(System.Action<T1> callback) { }
        protected override void ExecuteCallback(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override bool IsMatch(Mockolate.Interactions.MethodInvocation invocation) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1> Returns(System.Func<TReturn> callback) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1> Returns(System.Func<T1, TReturn> callback) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1> Returns(TReturn returnValue) { }
        protected override T SetOutParameter<T>(string parameterName, Mockolate.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockolate.MockBehavior behavior) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1> Throws(System.Exception exception) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1> Throws(System.Func<System.Exception> callback) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1> Throws(System.Func<T1, System.Exception> callback) { }
        public override string ToString() { }
    }
    public class ReturnMethodSetup<TReturn, T1, T2> : Mockolate.Setup.MethodSetup
    {
        public ReturnMethodSetup(string name, Mockolate.With.NamedParameter match1, Mockolate.With.NamedParameter match2) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2> Callback(System.Action callback) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2> Callback(System.Action<T1, T2> callback) { }
        protected override void ExecuteCallback(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override bool IsMatch(Mockolate.Interactions.MethodInvocation invocation) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2> Returns(System.Func<TReturn> callback) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2> Returns(System.Func<T1, T2, TReturn> callback) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2> Returns(TReturn returnValue) { }
        protected override T SetOutParameter<T>(string parameterName, Mockolate.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockolate.MockBehavior behavior) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2> Throws(System.Exception exception) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2> Throws(System.Func<System.Exception> callback) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2> Throws(System.Func<T1, T2, System.Exception> callback) { }
        public override string ToString() { }
    }
    public class ReturnMethodSetup<TReturn, T1, T2, T3> : Mockolate.Setup.MethodSetup
    {
        public ReturnMethodSetup(string name, Mockolate.With.NamedParameter match1, Mockolate.With.NamedParameter match2, Mockolate.With.NamedParameter match3) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2, T3> Callback(System.Action callback) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2, T3> Callback(System.Action<T1, T2, T3> callback) { }
        protected override void ExecuteCallback(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override bool IsMatch(Mockolate.Interactions.MethodInvocation invocation) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2, T3> Returns(System.Func<TReturn> callback) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2, T3> Returns(System.Func<T1, T2, T3, TReturn> callback) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2, T3> Returns(TReturn returnValue) { }
        protected override T SetOutParameter<T>(string parameterName, Mockolate.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockolate.MockBehavior behavior) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2, T3> Throws(System.Exception exception) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2, T3> Throws(System.Func<System.Exception> callback) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2, T3> Throws(System.Func<T1, T2, T3, System.Exception> callback) { }
        public override string ToString() { }
    }
    public class ReturnMethodSetup<TReturn, T1, T2, T3, T4> : Mockolate.Setup.MethodSetup
    {
        public ReturnMethodSetup(string name, Mockolate.With.NamedParameter match1, Mockolate.With.NamedParameter match2, Mockolate.With.NamedParameter match3, Mockolate.With.NamedParameter match4) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2, T3, T4> Callback(System.Action callback) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2, T3, T4> Callback(System.Action<T1, T2, T3, T4> callback) { }
        protected override void ExecuteCallback(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override bool IsMatch(Mockolate.Interactions.MethodInvocation invocation) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2, T3, T4> Returns(System.Func<TReturn> callback) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2, T3, T4> Returns(System.Func<T1, T2, T3, T4, TReturn> callback) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2, T3, T4> Returns(TReturn returnValue) { }
        protected override T SetOutParameter<T>(string parameterName, Mockolate.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockolate.MockBehavior behavior) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2, T3, T4> Throws(System.Exception exception) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2, T3, T4> Throws(System.Func<System.Exception> callback) { }
        public Mockolate.Setup.ReturnMethodSetup<TReturn, T1, T2, T3, T4> Throws(System.Func<T1, T2, T3, T4, System.Exception> callback) { }
        public override string ToString() { }
    }
    public class VoidMethodSetup : Mockolate.Setup.MethodSetup
    {
        public VoidMethodSetup(string name) { }
        public Mockolate.Setup.VoidMethodSetup Callback(System.Action callback) { }
        public Mockolate.Setup.VoidMethodSetup DoesNotThrow() { }
        protected override void ExecuteCallback(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override bool IsMatch(Mockolate.Interactions.MethodInvocation invocation) { }
        protected override T SetOutParameter<T>(string parameterName, Mockolate.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockolate.MockBehavior behavior) { }
        public Mockolate.Setup.VoidMethodSetup Throws(System.Exception exception) { }
        public Mockolate.Setup.VoidMethodSetup Throws(System.Func<System.Exception> callback) { }
        public override string ToString() { }
    }
    public class VoidMethodSetup<T1> : Mockolate.Setup.MethodSetup
    {
        public VoidMethodSetup(string name, Mockolate.With.NamedParameter match1) { }
        public Mockolate.Setup.VoidMethodSetup<T1> Callback(System.Action callback) { }
        public Mockolate.Setup.VoidMethodSetup<T1> Callback(System.Action<T1> callback) { }
        public Mockolate.Setup.VoidMethodSetup<T1> DoesNotThrow() { }
        protected override void ExecuteCallback(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override bool IsMatch(Mockolate.Interactions.MethodInvocation invocation) { }
        protected override T SetOutParameter<T>(string parameterName, Mockolate.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockolate.MockBehavior behavior) { }
        public Mockolate.Setup.VoidMethodSetup<T1> Throws(System.Exception exception) { }
        public Mockolate.Setup.VoidMethodSetup<T1> Throws(System.Func<System.Exception> callback) { }
        public Mockolate.Setup.VoidMethodSetup<T1> Throws(System.Func<T1, System.Exception> callback) { }
        public override string ToString() { }
    }
    public class VoidMethodSetup<T1, T2> : Mockolate.Setup.MethodSetup
    {
        public VoidMethodSetup(string name, Mockolate.With.NamedParameter match1, Mockolate.With.NamedParameter match2) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2> Callback(System.Action callback) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2> Callback(System.Action<T1, T2> callback) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2> DoesNotThrow() { }
        protected override void ExecuteCallback(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override bool IsMatch(Mockolate.Interactions.MethodInvocation invocation) { }
        protected override T SetOutParameter<T>(string parameterName, Mockolate.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockolate.MockBehavior behavior) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2> Throws(System.Exception exception) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2> Throws(System.Func<System.Exception> callback) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2> Throws(System.Func<T1, T2, System.Exception> callback) { }
        public override string ToString() { }
    }
    public class VoidMethodSetup<T1, T2, T3> : Mockolate.Setup.MethodSetup
    {
        public VoidMethodSetup(string name, Mockolate.With.NamedParameter match1, Mockolate.With.NamedParameter match2, Mockolate.With.NamedParameter match3) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2, T3> Callback(System.Action callback) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2, T3> Callback(System.Action<T1, T2, T3> callback) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2, T3> DoesNotThrow() { }
        protected override void ExecuteCallback(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override bool IsMatch(Mockolate.Interactions.MethodInvocation invocation) { }
        protected override T SetOutParameter<T>(string parameterName, Mockolate.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockolate.MockBehavior behavior) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2, T3> Throws(System.Exception exception) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2, T3> Throws(System.Func<System.Exception> callback) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2, T3> Throws(System.Func<T1, T2, T3, System.Exception> callback) { }
        public override string ToString() { }
    }
    public class VoidMethodSetup<T1, T2, T3, T4> : Mockolate.Setup.MethodSetup
    {
        public VoidMethodSetup(string name, Mockolate.With.NamedParameter match1, Mockolate.With.NamedParameter match2, Mockolate.With.NamedParameter match3, Mockolate.With.NamedParameter match4) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2, T3, T4> Callback(System.Action callback) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2, T3, T4> Callback(System.Action<T1, T2, T3, T4> callback) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2, T3, T4> DoesNotThrow() { }
        protected override void ExecuteCallback(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockolate.Interactions.MethodInvocation invocation, Mockolate.MockBehavior behavior) { }
        protected override bool IsMatch(Mockolate.Interactions.MethodInvocation invocation) { }
        protected override T SetOutParameter<T>(string parameterName, Mockolate.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockolate.MockBehavior behavior) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2, T3, T4> Throws(System.Exception exception) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2, T3, T4> Throws(System.Func<System.Exception> callback) { }
        public Mockolate.Setup.VoidMethodSetup<T1, T2, T3, T4> Throws(System.Func<T1, T2, T3, T4, System.Exception> callback) { }
        public override string ToString() { }
    }
}
namespace Mockolate.Verify
{
    public interface IMockGot<TMock>
    {
        Mockolate.Verify.VerificationResult<TMock> Property(string propertyName);
    }
    public interface IMockInvoked<TMock>
    {
        Mockolate.Verify.VerificationResult<TMock> Method(string methodName, params Mockolate.With.Parameter[] parameters);
    }
    public interface IMockSet<TMock>
    {
        Mockolate.Verify.VerificationResult<TMock> Property(string propertyName, Mockolate.With.Parameter value);
    }
    public interface IMockSubscribedTo<TMock>
    {
        Mockolate.Verify.VerificationResult<TMock> Event(string eventName);
    }
    public interface IMockUnsubscribedFrom<TMock>
    {
        Mockolate.Verify.VerificationResult<TMock> Event(string eventName);
    }
    public interface IMockVerify<TMock>
    {
        Mockolate.Interactions.MockInteractions Interactions { get; }
        TMock Mock { get; }
    }
    public class MockGot<T, TMock> : Mockolate.Verify.IMockGot<TMock>
    {
        public MockGot(Mockolate.Verify.IMockVerify<TMock> verify) { }
        public class Protected : Mockolate.Verify.MockGot<T, TMock>, Mockolate.Verify.IMockGot<TMock>
        {
            public Protected(Mockolate.Verify.IMockVerify<TMock> verify) { }
        }
        public class Proxy : Mockolate.Verify.MockGot<T, TMock>, Mockolate.Verify.IMockGot<TMock>
        {
            public Proxy(Mockolate.Verify.IMockGot<TMock> inner, Mockolate.Verify.IMockVerify<TMock> verify) { }
        }
    }
    public class MockInvoked<T, TMock> : Mockolate.Verify.IMockInvoked<TMock>
    {
        public MockInvoked(Mockolate.Verify.IMockVerify<TMock> verify) { }
        public class Protected : Mockolate.Verify.MockInvoked<T, TMock>, Mockolate.Verify.IMockInvoked<TMock>
        {
            public Protected(Mockolate.Verify.IMockVerify<TMock> verify) { }
        }
        public class Proxy : Mockolate.Verify.MockInvoked<T, TMock>, Mockolate.Verify.IMockInvoked<TMock>
        {
            public Proxy(Mockolate.Verify.IMockInvoked<TMock> inner, Mockolate.Verify.IMockVerify<TMock> verify) { }
        }
    }
    public class MockSet<T, TMock> : Mockolate.Verify.IMockSet<TMock>
    {
        public MockSet(Mockolate.Verify.IMockVerify<TMock> verify) { }
        public class Protected : Mockolate.Verify.MockSet<T, TMock>, Mockolate.Verify.IMockSet<TMock>
        {
            public Protected(Mockolate.Verify.IMockVerify<TMock> verify) { }
        }
        public class Proxy : Mockolate.Verify.MockSet<T, TMock>, Mockolate.Verify.IMockSet<TMock>
        {
            public Proxy(Mockolate.Verify.IMockSet<TMock> inner, Mockolate.Verify.IMockVerify<TMock> verify) { }
        }
    }
    public class MockSubscribedTo<T, TMock> : Mockolate.Verify.IMockSubscribedTo<TMock>
    {
        public MockSubscribedTo(Mockolate.Verify.IMockVerify<TMock> verify) { }
        public class Protected : Mockolate.Verify.MockSubscribedTo<T, TMock>, Mockolate.Verify.IMockSubscribedTo<TMock>
        {
            public Protected(Mockolate.Verify.IMockVerify<TMock> verify) { }
        }
        public class Proxy : Mockolate.Verify.MockSubscribedTo<T, TMock>, Mockolate.Verify.IMockSubscribedTo<TMock>
        {
            public Proxy(Mockolate.Verify.IMockSubscribedTo<TMock> inner, Mockolate.Verify.IMockVerify<TMock> verify) { }
        }
    }
    public class MockUnsubscribedFrom<T, TMock> : Mockolate.Verify.IMockUnsubscribedFrom<TMock>
    {
        public MockUnsubscribedFrom(Mockolate.Verify.IMockVerify<TMock> verify) { }
        public class Protected : Mockolate.Verify.MockUnsubscribedFrom<T, TMock>, Mockolate.Verify.IMockUnsubscribedFrom<TMock>
        {
            public Protected(Mockolate.Verify.IMockVerify<TMock> verify) { }
        }
        public class Proxy : Mockolate.Verify.MockUnsubscribedFrom<T, TMock>, Mockolate.Verify.IMockUnsubscribedFrom<TMock>
        {
            public Proxy(Mockolate.Verify.IMockUnsubscribedFrom<TMock> inner, Mockolate.Verify.IMockVerify<TMock> verify) { }
        }
    }
    public class MockVerify<T, TMock> : Mockolate.Verify.IMockVerify<TMock>
    {
        public MockVerify(Mockolate.Interactions.MockInteractions interactions, TMock mock) { }
        public bool ThatAllInteractionsAreVerified() { }
        public class Protected : Mockolate.Verify.MockVerify<T, TMock>
        {
            public Protected(Mockolate.Verify.IMockVerify<TMock> verify) { }
        }
    }
    public static class VerificationResultExtensions
    {
        public static bool AtLeast<TMock>(this Mockolate.Verify.VerificationResult<TMock> verificationResult, int times) { }
        public static bool AtLeastOnce<TMock>(this Mockolate.Verify.VerificationResult<TMock> verificationResult) { }
        public static bool AtMost<TMock>(this Mockolate.Verify.VerificationResult<TMock> verificationResult, int times) { }
        public static bool AtMostOnce<TMock>(this Mockolate.Verify.VerificationResult<TMock> verificationResult) { }
        public static bool Exactly<TMock>(this Mockolate.Verify.VerificationResult<TMock> verificationResult, int times) { }
        public static bool Never<TMock>(this Mockolate.Verify.VerificationResult<TMock> verificationResult) { }
        public static bool Once<TMock>(this Mockolate.Verify.VerificationResult<TMock> verificationResult) { }
        public static bool Then<TMock>(this Mockolate.Verify.VerificationResult<TMock> verificationResult, params System.Func<TMock, Mockolate.Verify.VerificationResult<TMock>>[] orderedChecks) { }
    }
    public class VerificationResult<TMock>
    {
        public VerificationResult(TMock mock, Mockolate.Interactions.MockInteractions interactions, Mockolate.Interactions.IInteraction[] matchingInteractions, string expectation) { }
        public string Expectation { get; }
        public TMock Mock { get; }
        public bool Verify(System.Func<Mockolate.Interactions.IInteraction[], bool> predicate) { }
    }
}